{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#introduction","title":"Introduction","text":"<p>A simple documentation with codes for a basic structural design of machine learning , Deep learning , Gen AI projects.In this documentation , The basic steps and the basic codes are given for creating data science projects.The Basic codes include folder structure creation, exception,logging , common utilities , pipeline code and so on.</p>"},{"location":"1_create_repo_env/","title":"1 Github Repo & Virtual Environment","text":"<p>Step 1 : create a new project repository from Github and clone it into your local machine.</p> <p>Step 2 : run below command in your terminal to clone a git repo into your local machine.  <pre><code>git clone \"your_git_repo_link\"\n</code></pre> Step 3 : get inside your clonned repo and run below command in your terminal. <pre><code>conda create -p venv python==3.8 -y\n</code></pre> Step 4 : Activate your environment from your terminal.</p> <pre><code>conda activate venv/\n</code></pre> <p>Now your newly created environment will be activated.</p>"},{"location":"2_project_folder_structure/","title":"2 Project folder structure","text":""},{"location":"2_project_folder_structure/#21-project-folder-structure-creation","title":"2.1 Project folder structure creation","text":"<p>Step 1 : create a python file named \"template.py\" in your project directory and paste below code into it.</p> <pre><code>import os\nfrom pathlib import Path\nimport logging\n\nlogging.basicConfig(level=logging.INFO,format='[%(asctime)s: %(message)s]')\n\npackage_name = \"project_src_folder_name\"  ## change as per your project name\n\nlist_of_files=[\n    f\"src/{package_name}/__init__.py\",\n    f\"src/{package_name}/entity/__init__.py\",\n    f\"src/{package_name}/entity/config_entity.py\",\n    f\"src/{package_name}/entity/artifact_entity.py\",\n    f\"src/{package_name}/components/__init__.py\",\n    f\"src/{package_name}/components/data_ingestion.py\",\n    f\"src/{package_name}/components/data_validation.py\",\n    f\"src/{package_name}/components/data_transformation.py\",\n    f\"src/{package_name}/components/model_trainer.py\",\n    f\"src/{package_name}/components/model_evaluation.py\",\n    f\"src/{package_name}/components/model_pusher.py\",\n    f\"src/{package_name}/configuration/__init__.py\",\n    f\"src/{package_name}/constants/__init__.py\",\n    f\"src/{package_name}/logger/__init__.py\",\n    f\"src/{package_name}/exception/__init__.py\",\n    f\"src/{package_name}/pipeline/__init__.py\",\n    f\"src/{package_name}/pipeline/tain_pipeline.py\",\n    f\"src/{package_name}/pipeline/prediction_pipeline.py\",\n    f\"src/{package_name}/utils/__init__.py\",\n    f\"src/{package_name}/utils/commonutils.py\",\n    f\"config/config.yaml\",\n    f\"params.yaml\",\n    f\"notebooks/experiments.ipynb\",\n    \"app.py\",\n    \"train.py\",\n    \"requirements.txt\",\n    \"Dockerfile\",\n    \".dockerignore\",\n    \"setup.py\"\n    ]\n\nfor file_path in list_of_files:\n\n    filepath=Path(file_path)\n    filedir,filename=os.path.split(filepath)\n\n    if filedir!=\"\":\n        os.makedirs(filedir,exist_ok=True)\n        logging.info(f\"creating file directory {filedir} for file {filename}\")\n\n    if not (os.path.exists(filepath)) or (os.path.getsize(filepath)==0):\n        with open(filepath,\"w\") as file:\n            pass\n            logging.info(f\"Empty file {filepath} created successfully !\")\n    else:\n        logging.info(f\"file {filepath} already exist.\")\n</code></pre> <p>Note : modify template.py file as per your requirements.</p> <p>Step 2 : Run the \"template.py\" script file from terminal . It will create the basic folder structure for the project.</p> <pre><code>    python template.py\n</code></pre>"},{"location":"2_project_folder_structure/#22-installing-libraries-in-virtual-environment","title":"2.2 Installing libraries in Virtual Environment","text":"<p>To install libraries in virtual environment , must activate the virtual environemnt first.</p> <p>for command prompt and powershell terminal</p> <pre><code>conda activate virtual_env_path/\n</code></pre> <p>for git bash or linux based terminal</p> <pre><code>source activate virtual_env_path/\n</code></pre> <p>Now add required libraries name and its version in \"requirements.txt\" file and run below command.</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>This above command will read the requirements from \"requirements.txt\" file and install all packages in virtual environment.</p>"},{"location":"3_custom_exception/","title":"3 Custom Exceptions","text":"<p>Below given steps are for creating custom exception for your project. </p> <p>Step 1 : Go to project source code directory &gt; exception folder &gt;  \"__init__.py\" and then copy and paste below code. Custom exception class name can be changed as required.</p> <pre><code>import sys\n\nclass CustomException(Exception):\n    def __init__(self,error_message:Exception,error_details:sys):\n        super().__init__(error_message)\n        self.error_message=CustomException.get_error_message_details(error_message,error_details)\n\n    def __str__(self) -&gt; str:\n        return self.error_message\n\n    @staticmethod\n    def get_error_message_details(error_message:Exception,error_details:sys):\n        \"\"\"\n        Args:\n            error_message (Exception): _description_\n            error_details (sys): _description_\n        \"\"\"\n        _, _,exc_trace=error_details.exc_info()\n\n        filename=exc_trace.tb_frame.f_code.co_filename\n        line_number=exc_trace.tb_lineno\n\n        error_message=f\"\"\"\n        Exception occured in script file {filename}, line numer {line_number},\n        error message is {str(error_message)}\n        \"\"\"\n\n        return error_message\n</code></pre>"},{"location":"4_custom_logger/","title":"4 Custom Logging","text":"<p>Below given code is for creating custom logger for project.</p> <p>Step : Go to project source code directory &gt; logger folder &gt;  \"__init__.py\" and then copy and paste below code. Custom logging message and logs folder &amp; file structure can be modified as required . </p> <pre><code>import os\nimport logging\nfrom datetime import datetime\n\nfilename=f\"{datetime.now().strftime('%d_%m_%Y_%H_%M_%S')}.log\"\n\nlogs_path=os.path.join(os.getcwd(),\"logs\")\nos.makedirs(logs_path,exist_ok=True)\n\nlog_file_path=os.path.join(logs_path,filename)\n\nlogging.basicConfig(\n    filename=log_file_path,\n    level=logging.INFO,\n    format=\"[%(asctime)s] | module : %(name)s | %(levelname)s , log line number %(lineno)s - %(message)s\"\n)\n</code></pre>"},{"location":"5_common_utilities/","title":"5 Common Utilities","text":""},{"location":"5_common_utilities/#coming-soon","title":"coming soon","text":""}]}